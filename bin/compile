#!/usr/bin/env bash

set -e
echo $HEROKU_APP_NAME
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BUILDPACK=$(cat $ENV_DIR/BUILDPACK)

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

write_profile() {
  local root_dir="$1"
  # This assumes that Heroku initially looks for profiles at the $HOME folder, which it does
  local subdir="$2"
  mkdir -p $root_dir/.profile.d

  # Set the home directory to be the subdir and source all profiles that
  # were placed here by the invoked buildpack
  # The $HOME variable must be escaped, so that its value is resolved at runtime and not now.
  echo "export HOME=\"\$HOME/$subdir\" && source \"$subdir/.profile.d/\"*" > "$root_dir/.profile.d/heroku-subdir-init.sh"
}


# Looks for a buildpack argument with the format
# subdir=https://github.com/my/buildpack.git
execute_buildpack_at_subdir() {
  local buildpack="$1"
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  subdir=$(echo $buildpack | cut -d"=" -f 1)

  if [ "$subdir" != "" ]; then
    # Copies the Procfile from the subdir to the root directory
    echo 'Detecting sub directory...'
    if [ -d $BUILD_DIR/$subdir ]; then
      echo 'Moving subdirectory...'
      mv $BUILD_DIR/$subdir $BUILD_DIR/tmp
      echo 'Done...'
      echo 'Removing everything else...'
      find . -maxdepth 1 \! -iname tmp -exec rm -rf '{}' \;
      echo 'Done...'
      echo 'Copy subdirectory to root...'
      cp $BUILD_DIR/tmp $BUILD_DIR/ -TR
      echo 'Done...'
      echo 'Removing tmp directory...'
      rm -rf $BUILD_DIR/tmp
      echo 'Done...Now We Dance!'
    else
      echo "Subdirectory not found..."
    fi
  else
    echo 'buildpack env is required...'
  fi
}

# BUILDPACK should be set as a Heroku config var
execute_buildpack_at_subdir "$BUILDPACK"

if [[ -e $BUILD_DIR/last_pack_release.out ]]; then
  echo "Using release configuration from last framework ($framework)."
fi
